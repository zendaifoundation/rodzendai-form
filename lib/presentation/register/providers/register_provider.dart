import 'dart:developer';

import 'package:flutter/foundation.dart' show kIsWeb;
import 'package:flutter/material.dart';
import 'package:geolocator/geolocator.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:rodzendai_form/presentation/register_status/blocs/get_location_detail_bloc/get_location_detail_bloc.dart';

class RegisterProvider extends ChangeNotifier {
  RegisterProvider({required GetLocationDetailBloc getLocationDetailBloc})
    : _getLocationDetailBloc = getLocationDetailBloc;

  final GetLocationDetailBloc _getLocationDetailBloc;

  TextEditingController _registerPickupLocationController =
      TextEditingController();
  TextEditingController get registerPickupLocationController =>
      _registerPickupLocationController;

  GoogleMapController? _googleMapController;
  GoogleMapController? get googleMapController => _googleMapController;

  LatLng _currentLocation = LatLng(13.7563, 100.5018); // ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø
  LatLng get currentLocation => _currentLocation;

  Set<Marker> _registerMarkers = {};
  Set<Marker> get registerMarkers => _registerMarkers;

  LatLng? _selectedLocation;
  LatLng? get selectedLocation => _selectedLocation;

  bool _isLoadingLocation = false;
  bool get isLoadingLocation => _isLoadingLocation;

  String? _locationError;

  String? get locationError => _locationError;

  String? _formattedAddress;
  String? get formattedAddress => _formattedAddress;

  Map<String, dynamic> get requestData {
    Map<String, dynamic> data = {};
    log('üì¶ Preparing request data: $data');
    return data;
  }

  /// ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  Future<void> getCurrentLocation() async {
    try {
      _isLoadingLocation = true;
      _locationError = null;
      notifyListeners();

      log('üìç Starting to get current location... (Web: $kIsWeb)');

      if (kIsWeb) {
        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Web - ‡πÉ‡∏ä‡πâ getCurrentPosition ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        log('üåê Running on Web - using HTML5 Geolocation');

        Position position =
            await Geolocator.getCurrentPosition(
              locationSettings: LocationSettings(
                accuracy: LocationAccuracy.high,
              ),
            ).timeout(
              Duration(seconds: 10),
              onTimeout: () {
                throw Exception('Timeout: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏î‡πâ');
              },
            );

        _currentLocation = LatLng(position.latitude, position.longitude);
        log(
          '‚úÖ Current location (Web): ${position.latitude}, ${position.longitude}',
        );
      } else {
        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Mobile - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö permission ‡∏Å‡πà‡∏≠‡∏ô
        log('üì± Running on Mobile - checking permissions');

        LocationPermission permission = await Geolocator.checkPermission();
        log('üìç Current permission status: $permission');

        if (permission == LocationPermission.denied) {
          log('üìç Requesting permission...');
          permission = await Geolocator.requestPermission();

          if (permission == LocationPermission.denied) {
            _locationError = '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á';
            log('‚ùå Location permissions are denied');
            _isLoadingLocation = false;
            notifyListeners();
            return;
          }
        }

        if (permission == LocationPermission.deniedForever) {
          _locationError = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤';
          log('‚ùå Location permissions are permanently denied');
          _isLoadingLocation = false;
          notifyListeners();
          return;
        }

        // ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        log('üîÑ Getting current position...');
        Position position =
            await Geolocator.getCurrentPosition(
              locationSettings: LocationSettings(
                accuracy: LocationAccuracy.high,
                distanceFilter: 10,
              ),
            ).timeout(
              Duration(seconds: 10),
              onTimeout: () {
                throw Exception('Timeout: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏î‡πâ');
              },
            );

        _currentLocation = LatLng(position.latitude, position.longitude);
        log(
          '‚úÖ Current location (Mobile): ${position.latitude}, ${position.longitude}',
        );
      }

      _isLoadingLocation = false;
      log('‚ö° Location fetching completed');
      log('üîî Notifying listeners...');
      notifyListeners();

      // ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å notify ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ map rebuild ‡∏Å‡πà‡∏≠‡∏ô)
      await Future.delayed(Duration(milliseconds: 300));

      if (_googleMapController != null) {
        log(
          'üì∑ Animating camera to: ${_currentLocation.latitude}, ${_currentLocation.longitude}',
        );
        await _googleMapController?.animateCamera(
          CameraUpdate.newLatLngZoom(_currentLocation, 17.0),
        );
        setMarkers(_currentLocation);
        notifyListeners();
        log('‚úÖ Camera animation completed');
      } else {
        log('‚ö†Ô∏è GoogleMapController is null, cannot animate camera');
      }
    } catch (e) {
      log('‚ùå Error getting location: $e');

      // ‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø) ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏î‡πâ
      _locationError = null; // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á error ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ó‡∏ô
      _currentLocation = LatLng(13.7563, 100.5018);

      log('‚ö†Ô∏è Using default location (Bangkok)');

      _isLoadingLocation = false;
      notifyListeners();
    }
  }

  void onMapCreated(GoogleMapController controller) {
    log('üó∫Ô∏è Map created!');
    _googleMapController = controller;

    getCurrentLocation();
  }

  /// ‡∏õ‡∏±‡∏Å‡∏´‡∏°‡∏∏‡∏î‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏ï‡∏∞‡∏ó‡∏µ‡πà‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
  void onMapTap(LatLng location) {
    log('üó∫Ô∏è Map tapped at: ${location.latitude}, ${location.longitude}');

    // ‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    _selectedLocation = location;

    // ‡∏•‡∏ö‡∏´‡∏°‡∏∏‡∏î‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏∏‡∏î‡πÉ‡∏´‡∏°‡πà
    setMarkers(location);

    log('üìç Marker created at: ${location.latitude}, ${location.longitude}');
    log('üìç Total markers: ${_registerMarkers.length}');

    // ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà
    _googleMapController?.animateCamera(
      CameraUpdate.newLatLngZoom(location, 17.0),
    );

    log('üîî Notifying listeners...');
    notifyListeners();
  }

  /// ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏≤‡∏Å‡∏´‡∏°‡∏∏‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
  void onMarkerDragEnd(LatLng newPosition) {
    log('Marker dragged to: ${newPosition.latitude}, ${newPosition.longitude}');
    _selectedLocation = newPosition;

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏´‡∏°‡∏∏‡∏î
    setMarkers(newPosition);
    log(
      'üìç Marker updated to: ${newPosition.latitude}, ${newPosition.longitude}',
    );

    notifyListeners();
  }

  void setMarkers(LatLng newPosition) {
    _registerMarkers = {
      Marker(
        markerId: MarkerId('pickup_location'),
        position: newPosition,
        infoWindow: InfoWindow(
          title: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢',
          snippet:
              '${newPosition.latitude.toStringAsFixed(6)}, ${newPosition.longitude.toStringAsFixed(6)}',
        ),
        icon: BitmapDescriptor.defaultMarkerWithHue(BitmapDescriptor.hueRed),
        draggable: true,
        onDragEnd: (position) {
          onMarkerDragEnd(position);
        },
      ),
    };

    _getLocationDetailBloc.add(
      GetLocationDetailRequestEvent(
        latitude: newPosition.latitude,
        longitude: newPosition.longitude,
      ),
    );
  }

  /// ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  void goToCurrentLocation() async {
    if (_googleMapController != null) {
      _googleMapController?.animateCamera(
        CameraUpdate.newLatLngZoom(_currentLocation, 15.0),
      );
    }
  }

  /// ‡∏•‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏∏‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  void clearMarkers() {
    _registerMarkers.clear();
    _selectedLocation = null;
    notifyListeners();
  }

  void setFormattedAddress(String address) {
    _formattedAddress = address;
    notifyListeners();
  }

  @override
  void dispose() {
    _registerPickupLocationController.dispose();
    _googleMapController?.dispose();
    super.dispose();
  }
}
