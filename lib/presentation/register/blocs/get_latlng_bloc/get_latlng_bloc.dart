import 'dart:async';
import 'dart:developer';
import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:rodzendai_form/core/services/geocoding_service.dart';

part 'get_latlng_event.dart';
part 'get_latlng_state.dart';

class GetLatLngBloc extends Bloc<GetLatLngEvent, GetLatLngState> {
  final GeocodingService _geocodingService;

  GetLatLngBloc({GeocodingService? geocodingService})
    : _geocodingService = geocodingService ?? GeocodingService(),
      super(GetLatLngInitial()) {
    on<GetLatLngFromPlaceIdEvent>(_onGetLatLngFromPlaceId);
    on<GetLatLngFromAddressEvent>(_onGetLatLngFromAddress);
  }

  /// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ event ‡∏î‡∏∂‡∏á lat/lng ‡∏à‡∏≤‡∏Å place_id
  FutureOr<void> _onGetLatLngFromPlaceId(
    GetLatLngFromPlaceIdEvent event,
    Emitter<GetLatLngState> emit,
  ) async {
    try {
      emit(GetLatLngLoading());

      log('üîç Fetching lat/lng from place_id: ${event.placeId}');

      final result = await _geocodingService.getLatLngFromPlaceId(
        event.placeId,
      );

      if (result != null) {
        final lat = result['lat'];
        final lng = result['lng'];

        if (lat != null && lng != null) {
          log('‚úÖ Lat/Lng found: $lat, $lng');
          emit(GetLatLngSuccess(latitude: lat, longitude: lng));
        } else {
          log('‚ùå Lat/Lng is null');
          emit(
            const GetLatLngFailure(
              message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏à‡∏≤‡∏Å Place ID ‡πÑ‡∏î‡πâ',
            ),
          );
        }
      } else {
        log('‚ùå Result is null');
        emit(
          const GetLatLngFailure(
            message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Place ID ‡∏ô‡∏µ‡πâ',
          ),
        );
      }
    } catch (e) {
      log('‚ùå Error fetching lat/lng from place_id: $e');
      emit(GetLatLngFailure(message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${e.toString()}'));
    }
  }

  /// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ event ‡∏î‡∏∂‡∏á lat/lng ‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
  FutureOr<void> _onGetLatLngFromAddress(
    GetLatLngFromAddressEvent event,
    Emitter<GetLatLngState> emit,
  ) async {
    try {
      emit(GetLatLngLoading());

      log('üîç Fetching lat/lng from address: ${event.address}');

      final result = await _geocodingService.getLatLngFromAddress(
        event.address,
      );

      if (result != null) {
        final lat = result['lat'];
        final lng = result['lng'];

        if (lat != null && lng != null) {
          log('‚úÖ Lat/Lng found: $lat, $lng');
          emit(GetLatLngSuccess(latitude: lat, longitude: lng));
        } else {
          log('‚ùå Lat/Lng is null');
          emit(
            const GetLatLngFailure(message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏î‡πâ'),
          );
        }
      } else {
        log('‚ùå Result is null');
        emit(
          const GetLatLngFailure(message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏µ‡πâ'),
        );
      }
    } catch (e) {
      log('‚ùå Error fetching lat/lng from address: $e');
      emit(GetLatLngFailure(message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${e.toString()}'));
    }
  }
}
