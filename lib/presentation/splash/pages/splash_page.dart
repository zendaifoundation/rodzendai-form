import 'dart:developer';

import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:rodzendai_form/core/constants/app_colors.dart';
import 'package:rodzendai_form/core/constants/app_text_styles.dart';
import 'package:rodzendai_form/core/services/auth_service.dart';
import 'package:rodzendai_form/core/services/liff_service.dart';
import 'package:rodzendai_form/core/services/service_locator.dart';
import 'package:rodzendai_form/widgets/loading_widget.dart';

class SplashPage extends StatefulWidget {
  const SplashPage({super.key});

  @override
  State<SplashPage> createState() => _SplashPageState();
}

class _SplashPageState extends State<SplashPage> {
  String _status = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...';
  bool _isNavigating = false; // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô navigation ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á

  @override
  void initState() {
    super.initState();
    // ‡πÉ‡∏ä‡πâ WidgetsBinding ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡πÉ‡∏´‡πâ widget build ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (mounted) {
        _initializeApp();
      }
    });
  }

  Future<void> _initializeApp() async {
    if (_isNavigating) return; // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô double navigation

    try {
      final authService = locator<AuthService>();

      if (!mounted) return;
      setState(() => _status = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö LINE...');

      log('üîÑ Starting LIFF initialization...');

      // Check if LIFF is running in mock/development mode
      const liffId = String.fromEnvironment('LIFF_ID', defaultValue: '');
      final isMockMode = LiffService.isMockMode;

      if (isMockMode) {
        final liffIdLabel = liffId.isEmpty ? 'empty' : 'configured';
        log('‚ö†Ô∏è LIFF mock mode active (LIFF_ID: $liffIdLabel)');
        log('‚ÑπÔ∏è Running without real LINE login');

        if (!mounted) return;
        setState(
          () => _status = '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô (‡πÇ‡∏´‡∏°‡∏î‡∏û‡∏±‡∏í‡∏ô‡∏≤/‡πÑ‡∏°‡πà‡∏°‡∏µ LIFF)',
        );

        await authService.initialize();

        if (!mounted) return;
        setState(() => _status = '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
        await Future.delayed(const Duration(milliseconds: 300));

        if (!mounted || _isNavigating) return;
        _isNavigating = true;

        log('‚û°Ô∏è Navigating to home page (mock LIFF)');
        if (mounted) {
          context.go('/home');
        }
        return;
      }

      if (!mounted) return;
      setState(() => _status = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ LIFF...');

      final initialized = await LiffService.init();
      log('‚úÖ LIFF initialized: $initialized');

      if (!initialized) {
        log('‚ö†Ô∏è LIFF not available, proceeding without login');

        if (!mounted) return;
        setState(() => _status = '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô...');
        await Future.delayed(const Duration(milliseconds: 500));

        if (!mounted || _isNavigating) return;
        _isNavigating = true;

        log('‚û°Ô∏è Navigating to home page (no LIFF)');
        if (mounted) {
          context.go('/home');
        }
        return;
      }

      // ‚≠ê ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ code parameter ‡πÑ‡∏´‡∏° (‡∏´‡∏•‡∏±‡∏á login redirect ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤)
      final uri = Uri.base;
      final hasLoginCallback = uri.queryParameters.containsKey('code');

      if (hasLoginCallback) {
        log('üîÑ Login callback detected: ${uri.queryParameters}');
        if (!mounted) return;
        setState(() => _status = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö...');

        // ‡πÉ‡∏´‡πâ‡πÄ‡∏ß‡∏•‡∏≤ LIFF process callback ‡πÅ‡∏•‡∏∞ set token
        await Future.delayed(const Duration(milliseconds: 1500));

        // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö re-check login status
        log('üîç Re-checking login status after callback...');
      }

      final isLoggedIn = LiffService.isLoggedIn();
      log('üîê Is logged in: $isLoggedIn');

      if (isLoggedIn) {
        if (!mounted) return;
        setState(() => _status = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ...');

        await authService.initialize();

        if (authService.isAuthenticated) {
          log('‚úÖ User logged in: ${authService.displayName}');
          log('‚úÖ User ID: ${authService.userId}');
        } else {
          log('‚ö†Ô∏è Failed to get user profile');
        }

        if (!mounted) return;
        setState(() => _status = '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
        await Future.delayed(const Duration(milliseconds: 300));

        if (!mounted || _isNavigating) return;
        _isNavigating = true;

        log('‚û°Ô∏è Navigating to home page');
        if (mounted) {
          // ‡∏•‡∏ö query parameters ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å URL ‡∏Å‡πà‡∏≠‡∏ô navigate
          context.go('/home');
        }
      } else if (hasLoginCallback) {
        // ‡∏°‡∏µ callback ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á not logged in = LIFF ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à
        log('‚ö†Ô∏è Has callback but not logged in yet, waiting...');
        if (!mounted) return;
        setState(() => _status = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...');

        // ‡∏£‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        await Future.delayed(const Duration(seconds: 2));

        // ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        if (LiffService.isLoggedIn()) {
          log('‚úÖ Login successful after retry');
          await authService.initialize();

          if (!mounted || _isNavigating) return;
          _isNavigating = true;

          if (mounted) {
            context.go('/home');
          }
        } else {
          log('‚ùå Login failed after callback');
          if (!mounted) return;
          setState(() => _status = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà');

          await Future.delayed(const Duration(seconds: 2));

          // ‡πÉ‡∏´‡πâ login ‡πÉ‡∏´‡∏°‡πà
          await LiffService.login();
        }
      } else {
        log('üîë Not logged in, triggering login...');
        if (!mounted) return;
        setState(() => _status = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö...');
        await LiffService.login();
        return;
      }
    } catch (e, stackTrace) {
      log('‚ùå Error initializing app: $e');
      log('Stack trace: $stackTrace');

      if (!mounted) return;
      setState(() => _status = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e');
      await Future.delayed(const Duration(seconds: 2));

      if (!mounted || _isNavigating) return;
      _isNavigating = true;

      log('‚è≠Ô∏è Proceeding to home despite error');
      if (mounted) {
        context.go('/home');
      }
    }
  }

  @override
  void dispose() {
    _isNavigating = false;
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.white,
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            // Logo
            Image.asset('assets/images/img_logo.png', width: 300, height: 300),
            const SizedBox(height: 32),

            // Loading indicator
            LoadingWidget(),
            const SizedBox(height: 24),

            // Status text
            Text(_status, style: AppTextStyles.regular.copyWith(fontSize: 16)),
          ],
        ),
      ),
    );
  }
}
